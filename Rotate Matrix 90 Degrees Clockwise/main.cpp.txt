#include <iostream> 
#include <Windows.h> 
#include <cstdlib>  
#include <ctime>  
using namespace std; 

// Function to print the matrix
void printMatrix(int** matrix, int n, int m) {  
    for (int i = 0; i < n; i++) { 
        for (int j = 0; j < m; j++) { 
            cout << matrix[i][j] << "\t";  // Printing each element
        } 
        cout << endl;  // New line after each row
    } 
} 

// Function to rotate the matrix by 90 degrees clockwise
int** rotateMatrix(int** matrix, int n, int m) {  
    int** rotated = new int* [m];  // Creating a new matrix with reversed dimensions
    for (int i = 0; i < m; i++) { 
        rotated[i] = new int[n];  // Allocating memory for the rotated matrix
    } 

    // Performing the rotation
    for (int i = 0; i < n; i++) { 
        for (int j = 0; j < m; j++) { 
            rotated[j][n - i - 1] = matrix[i][j];  // Rotation logic
        } 
    }

    return rotated;  // Returning the rotated matrix
}

void main() { 
    SetConsoleCP(1251); 
    SetConsoleOutputCP(1251); 
    srand(time(0));  // Initializing the random number generator

    const int n = 4;  // Number of rows
    const int m = 4;  // Number of columns

    // Allocating memory for the matrix
    int** matrix = new int* [n]; 
    for (int i = 0; i < n; i++) { 
        matrix[i] = new int[m]; 
    } 

    // Filling the matrix with random numbers between 0 and 99
    cout << "Initial matrix:" << endl; 
    for (int i = 0; i < n; i++) { 
        for (int j = 0; j < m; j++) { 
            matrix[i][j] = rand() % 100;  // Random number from 0 to 99
        } 
    } 

    // Printing the initial matrix
    printMatrix(matrix, n, m); 

    // Rotating the matrix by 90 degrees
    int** rotatedMatrix = rotateMatrix(matrix, n, m); 

    // Printing the rotated matrix
    cout << "\nMatrix after rotating 90 degrees clockwise:" << endl;  
    printMatrix(rotatedMatrix, m, n);  // Dimensions are swapped after rotation

    // Freeing memory for both matrices
    for (int i = 0; i < n; i++) { 
        delete[] matrix[i];  // Deleting rows of the original matrix
    } 
    delete[] matrix;  // Deleting the array of row pointers

    for (int i = 0; i < m; i++) {  
        delete[] rotatedMatrix[i];  // Deleting rows of the rotated matrix
    } 
    delete[] rotatedMatrix;  // Deleting the array of row pointers
}
